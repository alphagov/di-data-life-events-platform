name: Deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ecs_task_definition_filepath:
        required: false
        type: string
        default: .aws/task-definition.json
      ecs_task_definition_directory:
        required: false
        type: string
        default: .aws
      container_port:
        required: false
        type: number
        default: 8080
      image:
        required: true
        type: string

jobs:
  trigger-codedeploy:
    name: Trigger Codedeploy
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup variables for environment
        id: vars
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          echo "ecs_task_definition_name=$ENVIRONMENT-gdx-data-share-poc" >> $GITHUB_OUTPUT
          echo "container_name=$ENVIRONMENT-gdx-data-share-poc" >> $GITHUB_OUTPUT
          echo "ecs_service=$ENVIRONMENT-gdx-data-share-poc" >> $GITHUB_OUTPUT
          echo "ecs_cluster=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "codedeploy_application=$ENVIRONMENT-gdx-data-share-poc" >> $GITHUB_OUTPUT
          echo "codedeploy_deployment_group=$ENVIRONMENT-gdx-data-share-poc" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::776473272850:role/${{ inputs.environment }}-github-oidc-deploy
          role-session-name: codedeploy
          aws-region: eu-west-2
          mask-aws-account-id: false

      - name: Add tag for ${{ inputs.environment }} environment
        uses: abronin/ecr-retag-action@v1
        with:
          repository: gdx-data-share-poc
          tag: ${{ github.sha }}
          new-tags: ${{ inputs.environment }}

      - name: Set ECS task definition
        id: task-definition
        env:
          ECS_TASK_DEFINITION_NAME: ${{ steps.vars.outputs.ecs_task_definition_name }}
          ECS_TASK_DEFINITION_DIRECTORY: ${{ inputs.ecs_task_definition_directory }}
          ECS_TASK_DEFINITION_FILEPATH: ${{ inputs.ecs_task_definition_filepath }}
        run: |
          mkdir -p $ECS_TASK_DEFINITION_DIRECTORY
          aws ecs describe-task-definition --task-definition "$ECS_TASK_DEFINITION_NAME" | jq '.taskDefinition' > $ECS_TASK_DEFINITION_FILEPATH
          cat $ECS_TASK_DEFINITION_FILEPATH

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ecs_task_definition_filepath }}
          container-name: ${{ steps.vars.outputs.container_name }}
          image: ${{ inputs.image }}

      - name: Set appspec.json values
        id: appspec
        env:
          container_port: ${{ inputs.container_port }}
          container_name: ${{ steps.vars.outputs.container_name }}
          cluster: ${{ steps.vars.outputs.ecs_cluster }}
          service: ${{ steps.vars.outputs.ecs_service }}
          codedeploy-application: ${{ steps.vars.outputs.codedeploy_application }}
          codedeploy-deployment-group: ${{ steps.vars.outputs.codedeploy_deployment_group }}
        run: |
          export TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition="$container_name" | jq '.taskDefinition.taskDefinitionArn')
          cat ./ci/appspec.json | jq --arg key "$TASK_DEF_ARN" '.Resources[].TargetService.Properties.TaskDefinition=$key' \
          | jq --arg key "$container_port" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerPort=$key' \
          | jq --arg key "$container_name" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerName=$key' > .aws/appspec.json
          sed -i 's#\\"##g' .aws/appspec.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ steps.vars.outputs.ecs_service }}
          cluster: ${{ steps.vars.outputs.ecs_cluster }}
          wait-for-service-stability: true
          codedeploy-appspec: .aws/appspec.json
          codedeploy-application: ${{ steps.vars.outputs.codedeploy_application }}
          codedeploy-deployment-group: ${{ steps.vars.outputs.codedeploy_deployment_group }}

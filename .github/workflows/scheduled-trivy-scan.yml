name: Run scheduled Trivy scan

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'
  pull_request:

jobs:
  validate-images:
    strategy:
      matrix:
        include:
          - image: gdx
            context: ./
            trivyignore: .trivyignore
          - image: prometheus
            context: ./prometheus
            trivyignore: prometheus/.trivyignore
          - image: grafana
            context: ./grafana
            trivyignore: grafana/.trivyignore
      fail-fast: false
    name: Validate ${{ matrix.image }} image
    runs-on: ubuntu-latest
    outputs:
      gdx-outcome: ${{ steps.output.outputs.gdx-outcome || '' }}
      gdx-json: ${{ steps.output.outputs.gdx-json || '' }}
      prometheus-outcome: ${{ steps.output.outputs.prometheus-outcome || '' }}
      prometheus-json: ${{ steps.output.outputs.prometheus-json || '' }}
      grafana-outcome: ${{ steps.output.outputs.grafana-outcome || '' }}
      grafana-json: ${{ steps.output.outputs.grafana-json || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and tag image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: false
          tags: ${{ github.ref_name }}:${{ matrix.image }}
          load: true
          cache-to: type=gha
          cache-from: type=gha

      - id: trivy
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.10.0
        continue-on-error: true
        with:
          image-ref: ${{ github.ref_name }}:${{ matrix.image }}
          trivyignores: ${{ matrix.trivyignore }}
          exit-code: 1
          format: json
          output: ${{ matrix.image }}.json

      - id: output
        name: Setup output
        run: |
          echo "${{ matrix.image }}-outcome=${{ steps.trivy.outcome }}" >> $GITHUB_OUTPUT
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "${{ matrix.image }}-json<<$EOF" >> $GITHUB_OUTPUT
          jq '.Results[]
            | select(.Vulnerabilities != null)
            | .Vulnerabilities
            | map({ type: "mrkdwn", text: ("<"+.PrimaryURL+"|"+.VulnerabilityID+">") }, { type: "mrkdwn", text: .Severity })
            | .[]' ${{ matrix.image }}.json | jq -s >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

  validate-infra:
    name: Validate infra code
    runs-on: ubuntu-latest
    outputs:
      infra-outcome: ${{ steps.output.outputs.infra-outcome }}
      infra-json: ${{ steps.output.outputs.infra-json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: trivy
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.10.0
        continue-on-error: true
        with:
          scan-type: config
          trivyignores: .trivyignore.docker
          skip-dirs: lev-data/
          exit-code: 1
          format: json
          output: infra.json

      - id: output
        name: Setup output
        run: |
          echo "infra-outcome=${{ steps.trivy.outcome }}" >> $GITHUB_OUTPUT
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "infra-json<<$EOF" >> $GITHUB_OUTPUT
          jq '.Results[]
            | select(.Vulnerabilities != null)
            | .Vulnerabilities
            | map({ type: "mrkdwn", text: ("<"+.PrimaryURL+"|"+.VulnerabilityID+">") }, { type: "mrkdwn", text: .Severity })
            | .[]' infra.json | jq -s >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

  notify-slack:
    name: Notify Slack
    needs: [validate-images, validate-infra]
    runs-on: ubuntu-latest
    steps:
      - id: payload
        name: Construct payload
        run: |
          payload='{
            "text": "Trivy dependency scan failed\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Trivy dependency scan failed\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                },
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Scan*"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Outcome*"
                  },
                  {
                    "type": "plain_text",
                    "text": "GDX"
                  },
                  {
                    "type": "plain_text",
                    "text": "${{ needs.validate-images.outputs.gdx-outcome }}"
                  },
                  {
                    "type": "plain_text",
                    "text": "Prometheus"
                  },
                  {
                    "type": "plain_text",
                    "text": "${{ needs.validate-images.outputs.prometheus-outcome }}"
                  },
                  {
                    "type": "plain_text",
                    "text": "Grafana"
                  },
                  {
                    "type": "plain_text",
                    "text": "${{ needs.validate-images.outputs.grafana-outcome }}"
                  },
                  {
                    "type": "plain_text",
                    "text": "Infrastructure"
                  },
                  {
                    "type": "plain_text",
                    "text": "${{ needs.validate-infra.outputs.infra-outcome }}"
                  }
                ]
              }
            ]
          }'

          base_vulnerability_fields='[
            {
              "type": "mrkdwn",
              "text": "*Vulnerabilitiy*"
            },
            {
              "type": "mrkdwn",
              "text": "*Severity*"
            }
          ]'

          if [ "${{ needs.validate-images.outputs.gdx-outcome }}" = "failure"  ]
          then
            fields=$(jq '. += ${{ needs.validate-images.outputs.gdx-json }}' <<< $base_vulnerability_fields)
            payload=$(jq --argjson fields "$fields" '.blocks += [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*GDX*"
                },
                "fields": $fields
              }
            ]' <<< $payload)
          fi

          if [ "${{ needs.validate-images.outputs.prometheus-outcome }}" = "failure" ]
          then
            fields=$(jq '. += ${{ needs.validate-images.outputs.prometheus-json }}' <<< $base_vulnerability_fields)
            payload=$(jq --argjson fields "$fields" '.blocks += [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Prometheus*"
                },
                "fields": $fields
              }
            ]' <<< $payload)
          fi

          if [ "${{ needs.validate-images.outputs.grafana-outcome }}" = "failure" ]
          then
            fields=$(jq '. += ${{ needs.validate-images.outputs.grafana-json }}' <<< $base_vulnerability_fields)
            payload=$(jq --argjson fields "$fields" '.blocks += [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Grafana*"
                },
                "fields": $fields
              }
            ]' <<< $payload)
          fi

          if [ "${{ needs.validate-infra.outputs.infra-outcome }}" = "failure" ]
          then
            fields=$(jq '. += ${{ needs.validate-infra.outputs.infra-json }}' <<< $base_vulnerability_fields)
            payload=$(jq --argjson fields "$fields" '.blocks += [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Infrastructure*"
                },
                "fields": $fields
              }
            ]' <<< $payload)
          fi

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "payload<<$EOF" >> $GITHUB_OUTPUT
          echo $payload >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Send failure message to Slack
        if: |
          needs.validate-images.outputs.gdx-outcome != 'success' ||
          needs.validate-images.outputs.prometheus-outcome != 'success' ||
          needs.validate-images.outputs.grafana-outcome != 'success' ||
          needs.validate-infra.outputs.infra-outcome != 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: ${{ steps.payload.outputs.payload }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

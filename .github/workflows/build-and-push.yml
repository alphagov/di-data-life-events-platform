name: Build and push

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    outputs:
      image:
        value: ${{ jobs.build-image.outputs.image }}
      registry:
        value: ${{ jobs.build-image.outputs.registry }}

jobs:
  build-image:
    name: Build Docker image and push to ECR
    environment: shared
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push-image.outputs.image }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: git-version.yml

      - name: Build and tag image
        uses: docker/build-push-action@v4
        with:
          context: ./
          push: false
          tags: ${{ github.ref_name }}:latest
          load: true
          cache-to: type=gha
          cache-from: type=gha
          build-args: BUILD_NUMBER=${{ steps.gitversion.outputs.majorMinorPatch }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: ${{ github.ref_name }}:latest
          trivy-config: trivy.yaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::776473272850:role/shared-github-oidc-deploy
          role-session-name: push-image
          aws-region: eu-west-2
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push base image to Amazon ECR
        id: push-image
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/gdx-data-share-poc:${{ github.sha }}
        run: |
          docker tag ${{ github.ref_name }}:latest $IMAGE
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

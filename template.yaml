AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary serverless components for the Life Events Platform.


Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        POWERTOOLS_TRACER_CAPTURE_RESPONSE: false
        POWERTOOLS_TRACER_CAPTURE_ERROR: false
    Runtime: java17
    Architectures:
      - x86_64
    MemorySize: 512
    KmsKeyArn: !GetAtt MasterKmsKey.Arn
    Tracing: Active
    SnapStart:
      ApplyOn: PublishedVersions
    VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
  VpcStackName:
    Type: String
    Description: The name of the stack used to create the VPC
  Developer:
    Type: String
    Description: The name of the developer running the stack in dev
    Default: ""
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  IsDev:
    Fn::Equals:
      - !Ref Environment
      - "dev"

Mappings:
  EnvironmentConfiguration:
    dev:
      domainName: life-events.dev.account.gov.uk
    build:
      domainName: life-events.build.account.gov.uk
    staging:
      domainName: life-events.staging.account.gov.uk
    integration:
      domainName: life-events.integration.account.gov.uk
    production:
      domainName: life-events.account.gov.uk

Resources:
  MasterKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey*"
            Resource: "*"

  DeveloperHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: IsDev
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]

  DeveloperRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: IsDev
    Properties:
      Name: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
      Type: NS
      HostedZoneId: !ImportValue HostedZoneId
      ResourceRecords: !GetAtt DeveloperHostedZone.NameServers
      TTL: 60

  ApiGatewayCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsDev
        - !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
        - !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
      DomainValidationOptions:
        - DomainName: !If
            - IsDev
            - !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
            - !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
          HostedZoneId: !If
            - IsDev
            - !Ref DeveloperHostedZone
            - !ImportValue HostedZoneId
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: ENABLED

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We do not need gateway caching on a post only gateway.
      StageName: Prod
      TracingEnabled: true
      Domain:
        DomainName: !If
          - IsDev
          - !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
          - !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
        CertificateArn: !Ref ApiGatewayCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !If
            - IsDev
            - !Ref DeveloperHostedZone
            - Fn::ImportValue: HostedZoneId
          EvaluateTargetHealth: true
          IpV6: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      Tags:
        CheckovRulesToSkip: "CKV_AWS_120"

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}-access-logs"
      RetentionInDays: 14
      KmsKeyId: !GetAtt MasterKmsKey.Arn

  DeathValidationDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey

  DeathEnrichmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathEnrichmentDlq.Arn
        maxReceiveCount: 5

  DeathEnrichmentDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey

  DeathDistributionTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey
      TracingConfig: Active

  DeathSnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow SNS publish to SQS"
            Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Resource: "*"
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref DeathDistributionTopic
      Queues:
        - !GetAtt DeathMinimisationQueue.QueueUrl

  DeathDistributionDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey

  DeathDistributionTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt DeathMinimisationQueue.Arn
      TopicArn: !GetAtt DeathDistributionTopic.TopicArn
      RawMessageDelivery: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathDistributionDlq.Arn

  DeathMinimisationQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathMinimisationDlq.Arn
        maxReceiveCount: 5

  DeathMinimisationDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey

  DeathDeliveryQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKmsKey

  DeathValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-validation-${Environment}${Developer}"
      CodeUri: lambdas/death-validation
      Handler: uk.gov.di.data.lep.GroDeathValidation::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-validation
          TARGET_QUEUE: !GetAtt DeathEnrichmentQueue.QueueUrl
      AutoPublishAlias: latest
      Events:
        DeathApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Method: POST
            Path: /events/deathNotification/
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathValidationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MasterKmsKey.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeathEnrichmentQueue.QueueName
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  DeathEnrichmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-enrichment-${Environment}${Developer}"
      CodeUri: lambdas/death-enrichment
      Handler: uk.gov.di.data.lep.GroDeathEnrichment::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-enrichment
          TARGET_TOPIC: !GetAtt DeathDistributionTopic.TopicArn
      AutoPublishAlias: latest
      Events:
        DeathValidatedEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeathEnrichmentQueue.Arn
            BatchSize: 1
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathEnrichmentDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MasterKmsKey.Arn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DeathDistributionTopic.TopicName
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  DeathMinimisationFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-minimisation-${Environment}${Developer}"
      CodeUri: lambdas/death-minimisation
      Handler: uk.gov.di.data.lep.GroDeathNotificationMinimisation::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-minimisation
          TARGET_QUEUE: !GetAtt DeathDeliveryQueue.QueueUrl
          ENRICHMENT_FIELDS: FORENAMES, SURNAME
      AutoPublishAlias: latest
      Events:
        DeathEnrichedEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeathMinimisationQueue.Arn
            BatchSize: 1
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathMinimisationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MasterKmsKey.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeathDeliveryQueue.QueueName
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group permissions ruleset
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      SecurityGroupEgress:
        - DestinationSecurityGroupId:
            Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound traffic to vpc endpoints
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  XRayPolicy:
    Type: AWS::XRay::ResourcePolicy
    Properties:
      BypassPolicyLockoutCheck: false
      PolicyName: !Sub "AllowSNSXrayTracing${Developer}"
      PolicyDocument: !Sub "{
          \"Version\": \"2012-10-17\",
          \"Statement\": [
            {
              \"Sid\": \"SNSAccess\",
              \"Effect\": \"Allow\",
              \"Principal\": {
                \"Service\": \"sns.amazonaws.com\"
              },
              \"Action\": [
                \"xray:PutTraceSegments\",
                \"xray:GetSamplingRules\",
                \"xray:GetSamplingTargets\"
              ],
              \"Resource\": \"*\",
              \"Condition\": {
                \"StringEquals\": {
                  \"aws:SourceAccount\": \"${AWS::AccountId}\"
                },
                \"StringLike\": {
                  \"aws:SourceArn\": \"${DeathDistributionTopic.TopicArn}\"
                }
              }
            }
          ]
        }"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "UserPool-${Environment}${Developer}"

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: EventType
      Name: UserPoolResourceServer
      Scopes:
        - ScopeDescription: "Can publish death notification events"
          ScopeName: "DeathNotification"
      UserPoolId: !Ref UserPool

  DeathNotificationClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - UserPoolResourceServer
    Properties:
      AccessTokenValidity: 60
      AllowedOAuthFlows:
        - "client_credentials"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - EventType/DeathNotification
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
      GenerateSecret: true
      PreventUserExistenceErrors: "ENABLED"
      UserPoolId: !Ref UserPool
      TokenValidityUnits:
        AccessToken: "minutes"

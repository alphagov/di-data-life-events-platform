AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary serverless components for the Life Events Platform.


Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        POWERTOOLS_TRACER_CAPTURE_RESPONSE: false
        POWERTOOLS_TRACER_CAPTURE_ERROR: false
    Runtime: java17
    Architectures:
      - x86_64
    MemorySize: 512
    KmsKeyArn: !GetAtt MainKmsKey.Arn
    Tracing: Active
    SnapStart:
      ApplyOn: PublishedVersions
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
  VpcStackName:
    Type: String
    Description: The name of the stack used to create the VPC
  Developer:
    Type: String
    Description: The name of the developer running the stack in dev
    Default: ""
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  IsDev:
    Fn::Equals:
      - !Ref Environment
      - "dev"
  IsNotDev: !Not [ !Condition IsDev ]

Mappings:
  EnvironmentConfiguration:
    dev:
      domainName: life-events.dev.account.gov.uk
    build:
      domainName: life-events.build.account.gov.uk
    staging:
      domainName: life-events.staging.account.gov.uk
    integration:
      domainName: life-events.integration.account.gov.uk
    production:
      domainName: life-events.account.gov.uk

Resources:
  MainKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey*"
            Resource: "*"

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18: The logs bucket doesn't need logging.
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Ref MainKmsKey
      BucketName: !Sub "${Environment}${Developer}-life-events-logs-bucket"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  DeveloperHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: IsDev
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]

  DeveloperRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: IsDev
    Properties:
      Name: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
      Type: NS
      HostedZoneId: !ImportValue HostedZoneId
      ResourceRecords: !GetAtt DeveloperHostedZone.NameServers
      TTL: 60

  DevCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: IsDev
    Properties:
      DomainName: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
      DomainValidationOptions:
        - DomainName: !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
          HostedZoneId: !Ref DeveloperHostedZone
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: ENABLED

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We do not need gateway caching on a post only gateway.
      StageName: Prod
      TracingEnabled: true
      Domain:
        DomainName: !If
          - IsDev
          - !Join [ ".", [ !Ref Developer, !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ] ] ]
          - !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
        CertificateArn: !If
          - IsDev
          - !Ref DevCertificate
          - !ImportValue CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !If
            - IsDev
            - !Ref DeveloperHostedZone
            - Fn::ImportValue: HostedZoneId
          EvaluateTargetHealth: true
          IpV6: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      Tags:
        CheckovRulesToSkip: "CKV_AWS_120"

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}-access-logs"
      RetentionInDays: 14
      KmsKeyId: !GetAtt MainKmsKey.Arn

  ApiGatewayLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDev
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ApiGatewayLogGroup

  AuthorisationDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  DeathValidationDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  DeathEnrichmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathEnrichmentDlq.Arn
        maxReceiveCount: 5

  DeathEnrichmentDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  DeathDistributionTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey
      TracingConfig: Active

  DeathSnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow SNS publish to SQS"
            Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Resource: "*"
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref DeathDistributionTopic
      Queues:
        - !GetAtt DeathMinimisationQueue.QueueUrl

  DeathDistributionDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  DeathDistributionTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt DeathMinimisationQueue.Arn
      TopicArn: !GetAtt DeathDistributionTopic.TopicArn
      RawMessageDelivery: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathDistributionDlq.Arn

  DeathMinimisationQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathMinimisationDlq.Arn
        maxReceiveCount: 5

  DeathMinimisationDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  DeathDeliveryQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathDeliveryDlq.Arn
        maxReceiveCount: 5

  DeathDeliveryDlq:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MainKmsKey

  AuthorisationFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "authorisation-${Environment}${Developer}"
      CodeUri: lambdas/authorisation
      Handler: uk.gov.di.data.lep.Authorisation::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: authorisation
          USER_POOL_ID: !Ref UserPool
      AutoPublishAlias: latest
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AuthorisationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MainKmsKey.Arn
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdC
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  AuthorisationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/authorisation-${Environment}"
      KmsKeyId: !GetAtt MainKmsKey.Arn

# Comment out CSLS subscription filters until accounts have been granted access
#  AuthorisationFunctionLogGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDev
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref AuthorisationFunctionLogGroup

  DeathValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-validation-${Environment}${Developer}"
      CodeUri: lambdas/death-validation
      Handler: uk.gov.di.data.lep.GroDeathValidation::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-validation
          TARGET_QUEUE: !GetAtt DeathEnrichmentQueue.QueueUrl
      AutoPublishAlias: latest
      Events:
        DeathApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Method: POST
            Path: /events/deathNotification/
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathValidationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MainKmsKey.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeathEnrichmentQueue.QueueName
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  DeathValidationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/death-validation-${Environment}"
      KmsKeyId: !GetAtt MainKmsKey.Arn

# Comment out CSLS subscription filters until accounts have been granted access
#  DeathValidationFunctionLogGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDev
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref DeathValidationFunctionLogGroup

  DeathEnrichmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-enrichment-${Environment}${Developer}"
      CodeUri: lambdas/death-enrichment
      Handler: uk.gov.di.data.lep.GroDeathEnrichment::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-enrichment
          TARGET_TOPIC: !GetAtt DeathDistributionTopic.TopicArn
      AutoPublishAlias: latest
      Events:
        DeathValidatedEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeathEnrichmentQueue.Arn
            BatchSize: 1
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathEnrichmentDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MainKmsKey.Arn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DeathDistributionTopic.TopicName
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  DeathEnrichmentFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/death-enrichment-${Environment}"
      KmsKeyId: !GetAtt MainKmsKey.Arn

# Comment out CSLS subscription filters until accounts have been granted access
#  DeathEnrichmentFunctionLogGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDev
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref DeathEnrichmentFunctionLogGroup

  DeathMinimisationFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "death-minimisation-${Environment}${Developer}"
      CodeUri: lambdas/death-minimisation
      Handler: uk.gov.di.data.lep.GroDeathNotificationMinimisation::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: death-minimisation
          TARGET_QUEUE: !GetAtt DeathDeliveryQueue.QueueUrl
          ENRICHMENT_FIELDS: FORENAMES, SURNAME
      AutoPublishAlias: latest
      Events:
        DeathEnrichedEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeathMinimisationQueue.Arn
            BatchSize: 1
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeathMinimisationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MainKmsKey.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeathDeliveryQueue.QueueName
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  DeathMinimisationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/death-minimisation-${Environment}"
      KmsKeyId: !GetAtt MainKmsKey.Arn

# Comment out CSLS subscription filters until accounts have been granted access
#  DeathMinimisationFunctionLogGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDev
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref DeathMinimisationFunctionLogGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group permissions ruleset
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      SecurityGroupEgress:
        - DestinationSecurityGroupId:
            Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound traffic to vpc endpoints
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic to Internet - Network Firewall will allow only to CRIs
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

# Uncomment when GPC-509 is done and XRay resource policies are allowed in secure pipelines
#  XRayPolicy:
#    Type: AWS::XRay::ResourcePolicy
#    Properties:
#      BypassPolicyLockoutCheck: false
#      PolicyName: !Sub "AllowSNSXrayTracing${Developer}"
#      PolicyDocument: !Sub "{
#          \"Version\": \"2012-10-17\",
#          \"Statement\": [
#            {
#              \"Sid\": \"SNSAccess\",
#              \"Effect\": \"Allow\",
#              \"Principal\": {
#                \"Service\": \"sns.amazonaws.com\"
#              },
#              \"Action\": [
#                \"xray:PutTraceSegments\",
#                \"xray:GetSamplingRules\",
#                \"xray:GetSamplingTargets\"
#              ],
#              \"Resource\": \"*\",
#              \"Condition\": {
#                \"StringEquals\": {
#                  \"aws:SourceAccount\": \"${AWS::AccountId}\"
#                },
#                \"StringLike\": {
#                  \"aws:SourceArn\": \"${DeathDistributionTopic.TopicArn}\"
#                }
#              }
#            }
#          ]
#        }"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "UserPool-${Environment}${Developer}"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${Environment}${Developer}-life-events"

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: EventType
      Name: UserPoolResourceServer
      Scopes:
        - ScopeDescription: "Can publish death notification events"
          ScopeName: "DeathNotification"
      UserPoolId: !Ref UserPool

  DeathNotificationClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - UserPoolResourceServer
    Properties:
      AccessTokenValidity: 60
      AllowedOAuthFlows:
        - "client_credentials"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - EventType/DeathNotification
      ClientName: "DeathNotificationClient"
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
      GenerateSecret: true
      PreventUserExistenceErrors: "ENABLED"
      UserPoolId: !Ref UserPool
      TokenValidityUnits:
        AccessToken: "minutes"

  GroIngestionBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_21: We do not want to have versioning in this bucket as are treating it as a temporary store
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref MainKmsKey
      BucketName: !Sub "${Environment}${Developer}-life-events-gro-ingestion-bucket"
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: "gro-ingestion-bucket/log"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  GroIngestionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: groIngestionStepFunction.asl.json
      DefinitionSubstitutions:
        GroSplitFileFunctionArn: !GetAtt GroSplitFileFunction.Arn
      Events:
        GroIngestionTrigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.s3"
              detail-type:
                - "Object Created"
              detail:
                bucket:
                  name:
                    - !Ref GroIngestionBucket
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GroSplitFileFunction
        - Statement:
            - Sid: CloudWatchLogsAccess
              Effect: Allow
              Action:
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutLogEvents"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
              Resource: "*"
      Tracing:
        Enabled: true
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  GroSplitFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      # checkov:skip=CKV_AWS_173: Encryption settings are set globally.
      FunctionName: !Sub "gro-split-file-${Environment}${Developer}"
      CodeUri: lambdas/gro-split-file
      Handler: uk.gov.di.data.lep.SplitFile::handleRequest
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: authorisation
      AutoPublishAlias: latest
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AuthorisationDlq.Arn
      Policies:
        - Statement:
            - Sid: KmsMasterKeyAccess
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !GetAtt MainKmsKey.Arn
      Tags:
        CheckovRulesToSkip: "CKV_AWS_115.CKV_AWS_117.CKV_AWS_173"

  GroSplitFileFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/gro-split-file-${Environment}"
      KmsKeyId: !GetAtt MainKmsKey.Arn

# Comment out CSLS subscription filters until accounts have been granted access
#  GroSplitFileFunctionLogGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDev
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref GroSplitFileFunctionLogGroup

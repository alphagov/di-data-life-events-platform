plugins {
    id "java"
    id "org.sonarqube" version "4.4.0.3356"
    id 'jacoco-report-aggregation'
    id "com.diffplug.spotless" version "6.22.0"
}

dependencies {
    jacocoAggregation project(":lambdas:convert-set-to-old-format")
    jacocoAggregation project(":lambdas:death-enrichment")
    jacocoAggregation project(":lambdas:death-minimisation")
    jacocoAggregation project(":lambdas:death-validation")
    jacocoAggregation project(":lambdas:gro-convert-to-json")
    jacocoAggregation project(":lambdas:gro-generate-xml")
    jacocoAggregation project(":lambdas:gro-publish-record")
    jacocoAggregation project(":lambdas:gro-pull-file")
    jacocoAggregation project(":lib")
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

String jacocoBuildReportPath = "reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"

sonar {
    properties {
        property "sonar.projectKey", "alphagov_di-data-life-events-platform"
        property "sonar.organization", "alphagov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "$project.buildDir/$jacocoBuildReportPath"
    }
}

subprojects {
    sonar {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/$jacocoBuildReportPath"
        }
    }
}

spotless {
    java {
        target 'lib/src/*/java/**/*.java', 'lambdas/**/src/*/java/**/*.java'

        importOrder('com.acme', '', 'java|javax', '\\#com.acme', '\\#')
        removeUnusedImports()
    }
}

allprojects { project ->
    dependencyLocking {
        lockAllConfigurations()
    }
    task resolveAndLockAll {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks
        }
        doLast {
            configurations.findAll {
                it.canBeResolved
            }.each {it.resolve()}
        }
    }
}
